#lang racket
(require "../../../c.rkt"
         "../atiUtils/utils.rkt"
         ffi/unsafe
         ffi/cvector
         ffi/unsafe/cvector)

;(define setupTime -1)
;(define totalKernelTime -1)
;(define devices #f)
;(define context #f)
;(define commandQueue #f)
;(define program #f)
;(define kernel #f)
;(define samples (* 256 256))
;(define blockSizeX 1)
;(define blockSizeY 1)
;(define width 0)
;(define height 0)
;(define randArray #f)
;(define deviceCallPrice #f)
;(define devicePutPrice #f)
;(define hostCallPrice #f)
;(define hostPutPrice #f)
;
;(define (setupBlackScholes)
;  (set! width (sqrt samples))
;  (set! height width)
;  (set! randArray (malloc (* width height (ctype-sizeof _cl_float4)) 'raw))
;  (for ([i (in-range (* 4 numSamples))])
;    (ptr-set! randArray _cl_float i (random)))
;  (set! deviceCallPrice (malloc (* width height (ctype-sizeof _cl_float4)) 'raw))
;  (memset deviceCallPrice 0 (* width height (ctype-sizeof _cl_float4)))
;  (set! devicePutPrice (malloc (* width height (ctype-sizeof _cl_float4)) 'raw))
;  (memset devicePutPrice 0 (* width height (ctype-sizeof _cl_float4)))
;  (set! hostCallPrice (malloc (* width height (ctype-sizeof _cl_float4)) 'raw))
;  (memset hostCallPrice 0 (* width height (ctype-sizeof _cl_float4)))
;  (set! hostPutPrice (malloc (* width height (ctype-sizeof _cl_float4)) 'raw))
;  (memset hostPutPrice 0 (* width height (ctype-sizeof _cl_float4))))
;
;(define (setupCL)
;  (set!-values (devices context commandQueue program) (init-cl "BlackScholes_Kernels.cl" #:queueProperties 'CL_QUEUE_PROFILING_ENABLE))
;  (set! randBuf (clCreateBuffer context '(CL_MEM_READ_ONLY CL_MEM_USE_HOST_PTR) (* width height (ctype-sizeof _cl_float4)) randArray))
;  (set! callPriceBuf (clCreateBuffer context 'CL_MEM_WRITE_ONLY (* width height (ctype-sizeof _cl_float4)) #f))
;  (set! putPriceBuf (clCreateBuffer context 'CL_MEM_WRITE_ONLY (* width height (ctype-sizeof _cl_float4)) #f))
;  (set! kernel (clCreateKernel program #"blackScholes"))
;  (define kernelWorkGroupSize (optimum-threads kernel (cvector-ref devices 0) 256))
;  (let loop ()
;    (when (< (* blockSizeX blockSizeY) kernelWorkGroupSize)
;      (when (<= (* 2 blockSizeX blockSizeY) kernelWorkGroupSize) (set! blockSizeX (* 2 blockSizeX)))
;      (when (<= (* 2 blockSizeX blockSizeY) kernelWorkGroupSize) (set! blockSizeY (* 2 blockSizeY)))
;      (loop))))
;
;(define (runCLKernels)
;  (define globalThreads (vector width height))
;  (define localThreads (vector blockSizeX blockSizeY))
;  (clSetKernelArg:_cl_mem kernel 0 randBuf)
;  (clSetKernelArg:_cl_int kernel 1 width)
;  (clSetKernelArg:_cl_mem kernel 2 callPriceBuf)
;  (clSetKernelArg:_cl_mem kernel 3 putPriceBuf)
;  (clEnqueueNDRangeKernel commandQueue kernel 2 globalThreads localThreads (make-vector 0))
;  (clFinish commandQueue)
;  (clEnqueueReadBuffer commandQueue callPriceBuf 'CL_TRUE 0 (* width height (ctype-sizeof _cl_float4)) deviceCallPrice (make-vector 0))
;  (clEnqueueReadBuffer commandQueue putPriceBuf 'CL_TRUE 0 (* width height (ctype-sizeof _cl_float4)) devicePutPrice (make-vector 0)))
;
;(define (setup)
;  (setupBlackScholes)
;  (set! setupTime (time-real setupCL)))
;
;(define (run)
;  (set! totalKernelTime (time-real runCLKernels)))
;
;(define (verify-results)
;  (define verified (blackScholesCPUReference))
;  (printf "~n~a~n" (if verified "Passed" "Failed")))
;
;(define (cleanup)
;  (clReleaseKernel kernel)
;  (clReleaseProgram program)
;  (clReleaseMemObject randBuf)
;  (clReleaseMemObject callPriceBuf)
;  (clReleaseMemObject putPriceBuf)
;  (clReleaseCommandQueue commandQueue)
;  (clReleaseContext context)
;  (free randArray)
;  (free deviceCallPrice)
;  (free devicePutPrice)
;  (free hostCallPrice)
;  (free hostPutPrice))
;
;(setup)
;(run)
;(verify-results)
;(cleanup)
;(print-stats)